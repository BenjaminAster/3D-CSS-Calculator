@use "sass:string";

$checkboxCount: 16;

:root {
	color-scheme: dark;
}

body {
	font-family: sans-serif;
	background-color: black;
}

* {
	color: white;
	background: transparent;
}

a {
	color: lightSkyBlue;
}

@function pow($number, $exponent) {
	$value: 1;

	@if $exponent > 0 {
		@for $i from 1 through $exponent {
			$value: $value * $number;
		}
	}

	@return $value;
}

section.addition {
	font-family: monospace;
	counter-reset: first-number second-number sum-number 0;
	user-select: none;

	.operator {
		font-weight: bold;
		font-size: 2em;
	}

	.number-display {
		font-weight: bold;
		padding: {
			left: 0.4em;
		}
	}

	.number-display.first::after {
		content: "(" counter(first-number) ")";
	}

	.number-display.second::after {
		content: "(" counter(second-number) ")";
	}

	.number-display.sum::after {
		content: "(" counter(sum-number) ")";
	}

	input[type="checkbox"] {
		position: absolute;
		z-index: -1;
		opacity: 0;
	}

	$cell-width: 2em;

	.labels {
		display: inline-flex;
		flex-wrap: wrap;
		gap: 2px;

		span {
			display: inline-block;

			width: $cell-width;
			height: $cell-width;
		}

		label[for] {
			display: inline-flex;
			align-items: center;
			justify-content: center;

			width: 100%;
			height: 100%;

			background-color: white;
			color: black;

			&::before {
				content: "0";
			}
		}
	}

	.result-display {
		--col-bg: white;
		--col-fg: black;

		div.bits {
			display: inline-flex;
			flex-wrap: wrap;
			gap: 2px;

			span.show-check {
				display: inline-flex;
				align-items: center;
				justify-content: center;

				width: $cell-width;
				height: $cell-width;

				--gap: 10em;
				--char-width: 0.5em;

				gap: var(--gap);

				clip-path: inset(0);

				background-color: var(--col-bg);

				span {
					&.digit-0,
					&.digit-1 {
						color: var(--col-fg);
					}
				}
			}
		}
	}

	@for $i from 0 through ($checkboxCount) {
		$isFirstBox: ($i == 0);
		input#check-first-#{$i} {
			@each $isFirstChecked in (true, false) {
				&#{if($isFirstChecked, ":checked", ":not(:checked)")} {
					& ~ input#check-second-#{$i} {
						@each $isSecondChecked in (true, false) {
							&#{if($isSecondChecked, ":checked", ":not(:checked)")} {
								& ~ .result-display {
									--check-#{$i}-sum: #{if(
											$isFirstBox,
											if(
												$isFirstChecked,
												if($isSecondChecked, 0, 1),
												if($isSecondChecked, 1, 0)
											),
											if(
												$isFirstChecked,
												if(
													$isSecondChecked,
													calc(var(--check-#{$i - 1}-carry)),
													calc(1 - var(--check-#{$i - 1}-carry))
												),
												if(
													$isSecondChecked,
													calc(1 - var(--check-#{$i - 1}-carry)),
													calc(var(--check-#{$i - 1}-carry))
												)
											)
										)};
									--check-#{$i}-carry: #{if(
											$isFirstBox,
											if(
												$isFirstChecked,
												if($isSecondChecked, 1, 0),
												if($isSecondChecked, 0, 0)
											),
											if(
												$isFirstChecked,
												if($isSecondChecked, 1, calc(var(--check-#{$i - 1}-carry))),
												if($isSecondChecked, calc(var(--check-#{$i - 1}-carry)), 0)
											)
										)};
								}
							}
						}
					}
				}
			}
		}

		@each $type in ("first", "second") {
			input#check-#{$type}-#{$i}:checked {
				counter-increment: #{$type}-number #{pow(2, $i)} sum-number #{pow(2, $i)};

				& ~ .#{$type}-labels {
					label[for="check-#{$type}-#{$i}"] {
						&::before {
							content: "1";
						}
					}
				}
			}
		}

		.result-display {
			--check-#{$checkboxCount}-sum: var(--check-#{$checkboxCount - 1}-carry);

			div.bits {
				span.show-check.check-#{$i} {
					span {
						@each $digit in (0, 1) {
							&.digit-#{$digit} {
								padding-#{if($digit == 1, "right", "left")}: calc(
									(#{if($digit == 0, "1 -", "0 +")} var(--check-#{$i}-sum)) *
										(var(--gap) + var(--char-width))
								);
							}
						}
					}
				}
			}
		}
	}
}
